name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.8"
  NODE_VERSION: "18"

jobs:
  python-backend:
    name: Python Backend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        architecture: [x64]
        exclude:
          - os: macos-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black isort flake8 mypy

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: black --check .

    - name: Check import sorting with isort
      run: isort --check-only .

    - name: Type check with mypy
      run: mypy . --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: .

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-backend
        name: python-backend-coverage

  node-frontend:
    name: Node.js Frontend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ["18", "20"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint with ESLint
      run: npm run lint

    - name: Type check with TypeScript
      run: npm run type-check

    - name: Build frontend
      run: npm run build

    - name: Test frontend
      run: npm test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-backend, node-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: npm ci

    - name: Start Python backend
      run: |
        python server_real_rf_system.py --port /dev/null &
        sleep 5
      env:
        PYTHONPATH: .

    - name: Build and start frontend
      run: |
        npm run build
        npm run preview &
        sleep 5

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        PYTHONPATH: .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Python security scan
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -f json -o bandit-results.json

  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: [python-backend, node-frontend]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build Python executable
      run: |
        pyinstaller --onefile --name rf-transceiver-server server_real_rf_system.py
        pyinstaller --onefile --name rf-transceiver-client COMPLETE_AUDITABLE_RF_SYSTEM.py

    - name: Build Node.js frontend
      run: npm run build

    - name: Create distribution package
      run: |
        mkdir -p dist
        cp dist/rf-transceiver-server dist/
        cp dist/rf-transceiver-client dist/
        cp -r dist/ dist/frontend/
        tar -czf rf-transceiver-${{ matrix.os }}.tar.gz dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rf-transceiver-${{ matrix.os }}
        path: rf-transceiver-${{ matrix.os }}.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, build-artifacts]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here
